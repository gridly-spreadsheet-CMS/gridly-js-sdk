/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.33.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MergeCellConflict from './MergeCellConflict';

/**
 * The MergeRecordConflict model module.
 * @module com.gridly.api/model/MergeRecordConflict
 * @version 4.33.0
 */
class MergeRecordConflict {
    /**
     * Constructs a new <code>MergeRecordConflict</code>.
     * @alias module:com.gridly.api/model/MergeRecordConflict
     */
    constructor() { 
        
        MergeRecordConflict.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MergeRecordConflict</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.gridly.api/model/MergeRecordConflict} obj Optional instance to populate.
     * @return {module:com.gridly.api/model/MergeRecordConflict} The populated <code>MergeRecordConflict</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MergeRecordConflict();

            if (data.hasOwnProperty('cells')) {
                obj['cells'] = ApiClient.convertToType(data['cells'], [MergeCellConflict]);
            }
            if (data.hasOwnProperty('pathTag')) {
                obj['pathTag'] = ApiClient.convertToType(data['pathTag'], 'String');
            }
            if (data.hasOwnProperty('recordId')) {
                obj['recordId'] = ApiClient.convertToType(data['recordId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MergeRecordConflict</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MergeRecordConflict</code>.
     */
    static validateJSON(data) {
        if (data['cells']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cells'])) {
                throw new Error("Expected the field `cells` to be an array in the JSON data but got " + data['cells']);
            }
            // validate the optional field `cells` (array)
            for (const item of data['cells']) {
                MergeCellConflict.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['pathTag'] && !(typeof data['pathTag'] === 'string' || data['pathTag'] instanceof String)) {
            throw new Error("Expected the field `pathTag` to be a primitive type in the JSON string but got " + data['pathTag']);
        }
        // ensure the json data is a string
        if (data['recordId'] && !(typeof data['recordId'] === 'string' || data['recordId'] instanceof String)) {
            throw new Error("Expected the field `recordId` to be a primitive type in the JSON string but got " + data['recordId']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:com.gridly.api/model/MergeCellConflict>} cells
 */
MergeRecordConflict.prototype['cells'] = undefined;

/**
 * @member {String} pathTag
 */
MergeRecordConflict.prototype['pathTag'] = undefined;

/**
 * @member {String} recordId
 */
MergeRecordConflict.prototype['recordId'] = undefined;






export default MergeRecordConflict;

