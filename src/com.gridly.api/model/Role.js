/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.33.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Privilege from './Privilege';

/**
 * The Role model module.
 * @module com.gridly.api/model/Role
 * @version 4.33.0
 */
class Role {
    /**
     * Constructs a new <code>Role</code>.
     * @alias module:com.gridly.api/model/Role
     */
    constructor() { 
        
        Role.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Role</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.gridly.api/model/Role} obj Optional instance to populate.
     * @return {module:com.gridly.api/model/Role} The populated <code>Role</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Role();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('privileges')) {
                obj['privileges'] = ApiClient.convertToType(data['privileges'], [Privilege]);
            }
            if (data.hasOwnProperty('privilegeIds')) {
                obj['privilegeIds'] = ApiClient.convertToType(data['privilegeIds'], ['Number']);
            }
            if (data.hasOwnProperty('isSystemRole')) {
                obj['isSystemRole'] = ApiClient.convertToType(data['isSystemRole'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Role</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Role</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        if (data['privileges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['privileges'])) {
                throw new Error("Expected the field `privileges` to be an array in the JSON data but got " + data['privileges']);
            }
            // validate the optional field `privileges` (array)
            for (const item of data['privileges']) {
                Privilege.validateJsonObject(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['privilegeIds'])) {
            throw new Error("Expected the field `privilegeIds` to be an array in the JSON data but got " + data['privilegeIds']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Role.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Role.prototype['name'] = undefined;

/**
 * @member {String} title
 */
Role.prototype['title'] = undefined;

/**
 * @member {String} type
 */
Role.prototype['type'] = undefined;

/**
 * @member {String} level
 */
Role.prototype['level'] = undefined;

/**
 * @member {Array.<module:com.gridly.api/model/Privilege>} privileges
 */
Role.prototype['privileges'] = undefined;

/**
 * @member {Array.<Number>} privilegeIds
 */
Role.prototype['privilegeIds'] = undefined;

/**
 * @member {Boolean} isSystemRole
 */
Role.prototype['isSystemRole'] = undefined;






export default Role;

