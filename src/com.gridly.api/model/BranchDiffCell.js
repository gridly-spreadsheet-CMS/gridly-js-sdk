/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.33.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BranchDiffCell model module.
 * @module com.gridly.api/model/BranchDiffCell
 * @version 4.33.0
 */
class BranchDiffCell {
    /**
     * Constructs a new <code>BranchDiffCell</code>.
     * @alias module:com.gridly.api/model/BranchDiffCell
     */
    constructor() { 
        
        BranchDiffCell.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BranchDiffCell</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.gridly.api/model/BranchDiffCell} obj Optional instance to populate.
     * @return {module:com.gridly.api/model/BranchDiffCell} The populated <code>BranchDiffCell</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BranchDiffCell();

            if (data.hasOwnProperty('sourceDependencyStatus')) {
                obj['sourceDependencyStatus'] = ApiClient.convertToType(data['sourceDependencyStatus'], 'String');
            }
            if (data.hasOwnProperty('destinationDependencyStatus')) {
                obj['destinationDependencyStatus'] = ApiClient.convertToType(data['destinationDependencyStatus'], 'String');
            }
            if (data.hasOwnProperty('sourceSourceStatus')) {
                obj['sourceSourceStatus'] = ApiClient.convertToType(data['sourceSourceStatus'], 'String');
            }
            if (data.hasOwnProperty('destinationSourceStatus')) {
                obj['destinationSourceStatus'] = ApiClient.convertToType(data['destinationSourceStatus'], 'String');
            }
            if (data.hasOwnProperty('sourceLengthSetting')) {
                obj['sourceLengthSetting'] = ApiClient.convertToType(data['sourceLengthSetting'], 'Number');
            }
            if (data.hasOwnProperty('destinationLengthSetting')) {
                obj['destinationLengthSetting'] = ApiClient.convertToType(data['destinationLengthSetting'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('columnId')) {
                obj['columnId'] = ApiClient.convertToType(data['columnId'], 'String');
            }
            if (data.hasOwnProperty('sourceValue')) {
                obj['sourceValue'] = ApiClient.convertToType(data['sourceValue'], Object);
            }
            if (data.hasOwnProperty('destinationValue')) {
                obj['destinationValue'] = ApiClient.convertToType(data['destinationValue'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BranchDiffCell</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BranchDiffCell</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sourceDependencyStatus'] && !(typeof data['sourceDependencyStatus'] === 'string' || data['sourceDependencyStatus'] instanceof String)) {
            throw new Error("Expected the field `sourceDependencyStatus` to be a primitive type in the JSON string but got " + data['sourceDependencyStatus']);
        }
        // ensure the json data is a string
        if (data['destinationDependencyStatus'] && !(typeof data['destinationDependencyStatus'] === 'string' || data['destinationDependencyStatus'] instanceof String)) {
            throw new Error("Expected the field `destinationDependencyStatus` to be a primitive type in the JSON string but got " + data['destinationDependencyStatus']);
        }
        // ensure the json data is a string
        if (data['sourceSourceStatus'] && !(typeof data['sourceSourceStatus'] === 'string' || data['sourceSourceStatus'] instanceof String)) {
            throw new Error("Expected the field `sourceSourceStatus` to be a primitive type in the JSON string but got " + data['sourceSourceStatus']);
        }
        // ensure the json data is a string
        if (data['destinationSourceStatus'] && !(typeof data['destinationSourceStatus'] === 'string' || data['destinationSourceStatus'] instanceof String)) {
            throw new Error("Expected the field `destinationSourceStatus` to be a primitive type in the JSON string but got " + data['destinationSourceStatus']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['columnId'] && !(typeof data['columnId'] === 'string' || data['columnId'] instanceof String)) {
            throw new Error("Expected the field `columnId` to be a primitive type in the JSON string but got " + data['columnId']);
        }

        return true;
    }


}



/**
 * @member {module:com.gridly.api/model/BranchDiffCell.SourceDependencyStatusEnum} sourceDependencyStatus
 */
BranchDiffCell.prototype['sourceDependencyStatus'] = undefined;

/**
 * @member {module:com.gridly.api/model/BranchDiffCell.DestinationDependencyStatusEnum} destinationDependencyStatus
 */
BranchDiffCell.prototype['destinationDependencyStatus'] = undefined;

/**
 * @member {module:com.gridly.api/model/BranchDiffCell.SourceSourceStatusEnum} sourceSourceStatus
 */
BranchDiffCell.prototype['sourceSourceStatus'] = undefined;

/**
 * @member {module:com.gridly.api/model/BranchDiffCell.DestinationSourceStatusEnum} destinationSourceStatus
 */
BranchDiffCell.prototype['destinationSourceStatus'] = undefined;

/**
 * @member {Number} sourceLengthSetting
 */
BranchDiffCell.prototype['sourceLengthSetting'] = undefined;

/**
 * @member {Number} destinationLengthSetting
 */
BranchDiffCell.prototype['destinationLengthSetting'] = undefined;

/**
 * @member {module:com.gridly.api/model/BranchDiffCell.StatusEnum} status
 */
BranchDiffCell.prototype['status'] = undefined;

/**
 * @member {String} columnId
 */
BranchDiffCell.prototype['columnId'] = undefined;

/**
 * @member {Object} sourceValue
 */
BranchDiffCell.prototype['sourceValue'] = undefined;

/**
 * @member {Object} destinationValue
 */
BranchDiffCell.prototype['destinationValue'] = undefined;





/**
 * Allowed values for the <code>sourceDependencyStatus</code> property.
 * @enum {String}
 * @readonly
 */
BranchDiffCell['SourceDependencyStatusEnum'] = {

    /**
     * value: "upToDate"
     * @const
     */
    "upToDate": "upToDate",

    /**
     * value: "outOfDate"
     * @const
     */
    "outOfDate": "outOfDate",

    /**
     * value: "unset"
     * @const
     */
    "unset": "unset"
};


/**
 * Allowed values for the <code>destinationDependencyStatus</code> property.
 * @enum {String}
 * @readonly
 */
BranchDiffCell['DestinationDependencyStatusEnum'] = {

    /**
     * value: "upToDate"
     * @const
     */
    "upToDate": "upToDate",

    /**
     * value: "outOfDate"
     * @const
     */
    "outOfDate": "outOfDate",

    /**
     * value: "unset"
     * @const
     */
    "unset": "unset"
};


/**
 * Allowed values for the <code>sourceSourceStatus</code> property.
 * @enum {String}
 * @readonly
 */
BranchDiffCell['SourceSourceStatusEnum'] = {

    /**
     * value: "unset"
     * @const
     */
    "unset": "unset",

    /**
     * value: "doNotTranslate"
     * @const
     */
    "doNotTranslate": "doNotTranslate",

    /**
     * value: "notReadyForTranslation"
     * @const
     */
    "notReadyForTranslation": "notReadyForTranslation",

    /**
     * value: "readyForTranslation"
     * @const
     */
    "readyForTranslation": "readyForTranslation",

    /**
     * value: "locked"
     * @const
     */
    "locked": "locked",

    /**
     * value: "lockAllLanguages"
     * @const
     */
    "lockAllLanguages": "lockAllLanguages"
};


/**
 * Allowed values for the <code>destinationSourceStatus</code> property.
 * @enum {String}
 * @readonly
 */
BranchDiffCell['DestinationSourceStatusEnum'] = {

    /**
     * value: "unset"
     * @const
     */
    "unset": "unset",

    /**
     * value: "doNotTranslate"
     * @const
     */
    "doNotTranslate": "doNotTranslate",

    /**
     * value: "notReadyForTranslation"
     * @const
     */
    "notReadyForTranslation": "notReadyForTranslation",

    /**
     * value: "readyForTranslation"
     * @const
     */
    "readyForTranslation": "readyForTranslation",

    /**
     * value: "locked"
     * @const
     */
    "locked": "locked",

    /**
     * value: "lockAllLanguages"
     * @const
     */
    "lockAllLanguages": "lockAllLanguages"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
BranchDiffCell['StatusEnum'] = {

    /**
     * value: "behind"
     * @const
     */
    "behind": "behind",

    /**
     * value: "ahead"
     * @const
     */
    "ahead": "ahead",

    /**
     * value: "conflicted"
     * @const
     */
    "conflicted": "conflicted",

    /**
     * value: "unchanged"
     * @const
     */
    "unchanged": "unchanged",

    /**
     * value: "invalidData"
     * @const
     */
    "invalidData": "invalidData",

    /**
     * value: "na"
     * @const
     */
    "na": "na",

    /**
     * value: "empty"
     * @const
     */
    "empty": "empty",

    /**
     * value: "targetTranslationEmpty"
     * @const
     */
    "targetTranslationEmpty": "targetTranslationEmpty",

    /**
     * value: "translationNotReady"
     * @const
     */
    "translationNotReady": "translationNotReady",

    /**
     * value: "translationNotFound"
     * @const
     */
    "translationNotFound": "translationNotFound",

    /**
     * value: "sourceTargetMismatched"
     * @const
     */
    "sourceTargetMismatched": "sourceTargetMismatched",

    /**
     * value: "targetChangedTMNotApproved"
     * @const
     */
    "targetChangedTMNotApproved": "targetChangedTMNotApproved",

    /**
     * value: "targetNotChanged"
     * @const
     */
    "targetNotChanged": "targetNotChanged",

    /**
     * value: "sourcedChanged"
     * @const
     */
    "sourcedChanged": "sourcedChanged",

    /**
     * value: "targetChanged"
     * @const
     */
    "targetChanged": "targetChanged",

    /**
     * value: "textOverLength"
     * @const
     */
    "textOverLength": "textOverLength",

    /**
     * value: "translationNotChanged"
     * @const
     */
    "translationNotChanged": "translationNotChanged",

    /**
     * value: "notChanged"
     * @const
     */
    "notChanged": "notChanged",

    /**
     * value: "warningOff"
     * @const
     */
    "warningOff": "warningOff"
};



export default BranchDiffCell;

