/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterField from './FilterField';
import MergeRecordConflict from './MergeRecordConflict';

/**
 * The MergeBranchRequest model module.
 * @module com.gridly.api/model/MergeBranchRequest
 * @version 5.9.0
 */
class MergeBranchRequest {
    /**
     * Constructs a new <code>MergeBranchRequest</code>.
     * @alias module:com.gridly.api/model/MergeBranchRequest
     */
    constructor() { 
        
        MergeBranchRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MergeBranchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.gridly.api/model/MergeBranchRequest} obj Optional instance to populate.
     * @return {module:com.gridly.api/model/MergeBranchRequest} The populated <code>MergeBranchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MergeBranchRequest();

            if (data.hasOwnProperty('mergeRecordOptions')) {
                obj['mergeRecordOptions'] = ApiClient.convertToType(data['mergeRecordOptions'], ['String']);
            }
            if (data.hasOwnProperty('mergeRecordConflicts')) {
                obj['mergeRecordConflicts'] = ApiClient.convertToType(data['mergeRecordConflicts'], [MergeRecordConflict]);
            }
            if (data.hasOwnProperty('useLastMergeResolve')) {
                obj['useLastMergeResolve'] = ApiClient.convertToType(data['useLastMergeResolve'], 'Boolean');
            }
            if (data.hasOwnProperty('checkMismatchedColumnType')) {
                obj['checkMismatchedColumnType'] = ApiClient.convertToType(data['checkMismatchedColumnType'], 'Boolean');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], [FilterField]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MergeBranchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MergeBranchRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['mergeRecordOptions'])) {
            throw new Error("Expected the field `mergeRecordOptions` to be an array in the JSON data but got " + data['mergeRecordOptions']);
        }
        if (data['mergeRecordConflicts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mergeRecordConflicts'])) {
                throw new Error("Expected the field `mergeRecordConflicts` to be an array in the JSON data but got " + data['mergeRecordConflicts']);
            }
            // validate the optional field `mergeRecordConflicts` (array)
            for (const item of data['mergeRecordConflicts']) {
                MergeRecordConflict.validateJsonObject(item);
            };
        }
        if (data['query']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['query'])) {
                throw new Error("Expected the field `query` to be an array in the JSON data but got " + data['query']);
            }
            // validate the optional field `query` (array)
            for (const item of data['query']) {
                FilterField.validateJsonObject(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:com.gridly.api/model/MergeBranchRequest.MergeRecordOptionsEnum>} mergeRecordOptions
 */
MergeBranchRequest.prototype['mergeRecordOptions'] = undefined;

/**
 * @member {Array.<module:com.gridly.api/model/MergeRecordConflict>} mergeRecordConflicts
 */
MergeBranchRequest.prototype['mergeRecordConflicts'] = undefined;

/**
 * @member {Boolean} useLastMergeResolve
 */
MergeBranchRequest.prototype['useLastMergeResolve'] = undefined;

/**
 * @member {Boolean} checkMismatchedColumnType
 */
MergeBranchRequest.prototype['checkMismatchedColumnType'] = undefined;

/**
 * @member {Array.<module:com.gridly.api/model/FilterField>} query
 */
MergeBranchRequest.prototype['query'] = undefined;





/**
 * Allowed values for the <code>mergeRecordOptions</code> property.
 * @enum {String}
 * @readonly
 */
MergeBranchRequest['MergeRecordOptionsEnum'] = {

    /**
     * value: "add"
     * @const
     */
    "add": "add",

    /**
     * value: "update"
     * @const
     */
    "update": "update",

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "override"
     * @const
     */
    "override": "override"
};



export default MergeBranchRequest;

