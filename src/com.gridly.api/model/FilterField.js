/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.29.1
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FilterField model module.
 * @module com.gridly.api/model/FilterField
 * @version 4.29.1
 */
class FilterField {
    /**
     * Constructs a new <code>FilterField</code>.
     * @alias module:com.gridly.api/model/FilterField
     * @param operator {module:com.gridly.api/model/FilterField.OperatorEnum} 
     */
    constructor(operator) { 
        
        FilterField.initialize(this, operator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operator) { 
        obj['operator'] = operator;
    }

    /**
     * Constructs a <code>FilterField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.gridly.api/model/FilterField} obj Optional instance to populate.
     * @return {module:com.gridly.api/model/FilterField} The populated <code>FilterField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterField();

            if (data.hasOwnProperty('caseSensitive')) {
                obj['caseSensitive'] = ApiClient.convertToType(data['caseSensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('columnId')) {
                obj['columnId'] = ApiClient.convertToType(data['columnId'], 'String');
            }
            if (data.hasOwnProperty('dynamicColumn')) {
                obj['dynamicColumn'] = ApiClient.convertToType(data['dynamicColumn'], 'String');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('queryPathTagViaId')) {
                obj['queryPathTagViaId'] = ApiClient.convertToType(data['queryPathTagViaId'], 'Boolean');
            }
            if (data.hasOwnProperty('subField')) {
                obj['subField'] = ApiClient.convertToType(data['subField'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [Object]);
            }
        }
        return obj;
    }


}

/**
 * @member {Boolean} caseSensitive
 */
FilterField.prototype['caseSensitive'] = undefined;

/**
 * @member {String} columnId
 */
FilterField.prototype['columnId'] = undefined;

/**
 * @member {String} dynamicColumn
 */
FilterField.prototype['dynamicColumn'] = undefined;

/**
 * @member {module:com.gridly.api/model/FilterField.OperatorEnum} operator
 */
FilterField.prototype['operator'] = undefined;

/**
 * @member {Boolean} queryPathTagViaId
 */
FilterField.prototype['queryPathTagViaId'] = undefined;

/**
 * @member {module:com.gridly.api/model/FilterField.SubFieldEnum} subField
 */
FilterField.prototype['subField'] = undefined;

/**
 * @member {Array.<Object>} values
 */
FilterField.prototype['values'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
FilterField['OperatorEnum'] = {

    /**
     * value: "isNull"
     * @const
     */
    "isNull": "isNull",

    /**
     * value: "isNotNull"
     * @const
     */
    "isNotNull": "isNotNull",

    /**
     * value: "isEmpty"
     * @const
     */
    "isEmpty": "isEmpty",

    /**
     * value: "isNotEmpty"
     * @const
     */
    "isNotEmpty": "isNotEmpty",

    /**
     * value: "contains"
     * @const
     */
    "contains": "contains",

    /**
     * value: "notContains"
     * @const
     */
    "notContains": "notContains",

    /**
     * value: "startsWith"
     * @const
     */
    "startsWith": "startsWith",

    /**
     * value: "notStartsWith"
     * @const
     */
    "notStartsWith": "notStartsWith",

    /**
     * value: "endsWith"
     * @const
     */
    "endsWith": "endsWith",

    /**
     * value: "notEndsWith"
     * @const
     */
    "notEndsWith": "notEndsWith",

    /**
     * value: "regexp"
     * @const
     */
    "regexp": "regexp",

    /**
     * value: "notRegexp"
     * @const
     */
    "notRegexp": "notRegexp",

    /**
     * value: "="
     * @const
     */
    "EQUAL": "=",

    /**
     * value: "!="
     * @const
     */
    "NOT_EQUAL": "!=",

    /**
     * value: "<"
     * @const
     */
    "LESS_THAN": "<",

    /**
     * value: "<="
     * @const
     */
    "LESS_THAN_OR_EQUAL_TO": "<=",

    /**
     * value: ">"
     * @const
     */
    "GREATER_THAN": ">",

    /**
     * value: ">="
     * @const
     */
    "GREATER_THAN_OR_EQUAL_TO": ">=",

    /**
     * value: "in"
     * @const
     */
    "in": "in",

    /**
     * value: "notIn"
     * @const
     */
    "notIn": "notIn",

    /**
     * value: "modifiedBy"
     * @const
     */
    "modifiedBy": "modifiedBy",

    /**
     * value: "notModifiedBy"
     * @const
     */
    "notModifiedBy": "notModifiedBy",

    /**
     * value: "between"
     * @const
     */
    "between": "between",

    /**
     * value: "notBetween"
     * @const
     */
    "notBetween": "notBetween",

    /**
     * value: "hasQaError"
     * @const
     */
    "hasQaError": "hasQaError",

    /**
     * value: "isLengthViolated"
     * @const
     */
    "isLengthViolated": "isLengthViolated",

    /**
     * value: "hasTag"
     * @const
     */
    "hasTag": "hasTag",

    /**
     * value: "isMt"
     * @const
     */
    "isMt": "isMt"
};


/**
 * Allowed values for the <code>subField</code> property.
 * @enum {String}
 * @readonly
 */
FilterField['SubFieldEnum'] = {

    /**
     * value: "DEPENDENCY_STATUS"
     * @const
     */
    "DEPENDENCY_STATUS": "DEPENDENCY_STATUS",

    /**
     * value: "SOURCE_STATUS"
     * @const
     */
    "SOURCE_STATUS": "SOURCE_STATUS",

    /**
     * value: "TARGET_STATUS"
     * @const
     */
    "TARGET_STATUS": "TARGET_STATUS",

    /**
     * value: "FLOW_STATUS"
     * @const
     */
    "FLOW_STATUS": "FLOW_STATUS",

    /**
     * value: "TM"
     * @const
     */
    "TM": "TM",

    /**
     * value: "MT"
     * @const
     */
    "MT": "MT",

    /**
     * value: "TICKET"
     * @const
     */
    "TICKET": "TICKET",

    /**
     * value: "COLOR"
     * @const
     */
    "COLOR": "COLOR",

    /**
     * value: "METADATA"
     * @const
     */
    "METADATA": "METADATA",

    /**
     * value: "CELL_METADATA"
     * @const
     */
    "CELL_METADATA": "CELL_METADATA",

    /**
     * value: "WORD_COUNT"
     * @const
     */
    "WORD_COUNT": "WORD_COUNT",

    /**
     * value: "PREVIEW_SOURCE_DATA"
     * @const
     */
    "PREVIEW_SOURCE_DATA": "PREVIEW_SOURCE_DATA",

    /**
     * value: "PREVIEW_SOURCE_DEPENDENCY_STATUS"
     * @const
     */
    "PREVIEW_SOURCE_DEPENDENCY_STATUS": "PREVIEW_SOURCE_DEPENDENCY_STATUS",

    /**
     * value: "PREVIEW_STATUS"
     * @const
     */
    "PREVIEW_STATUS": "PREVIEW_STATUS",

    /**
     * value: "PREVIEW_MERGE_OPTION"
     * @const
     */
    "PREVIEW_MERGE_OPTION": "PREVIEW_MERGE_OPTION",

    /**
     * value: "RELATIVE_TIME"
     * @const
     */
    "RELATIVE_TIME": "RELATIVE_TIME",

    /**
     * value: "LENGTH_VIOLATED"
     * @const
     */
    "LENGTH_VIOLATED": "LENGTH_VIOLATED",

    /**
     * value: "LENGTH_SETTING"
     * @const
     */
    "LENGTH_SETTING": "LENGTH_SETTING",

    /**
     * value: "WORKFLOW_STATUS"
     * @const
     */
    "WORKFLOW_STATUS": "WORKFLOW_STATUS"
};



export default FilterField;

