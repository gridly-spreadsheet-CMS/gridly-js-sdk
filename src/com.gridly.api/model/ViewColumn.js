/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.33.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnReference from './ColumnReference';
import DateTimeFormat from './DateTimeFormat';
import Formula from './Formula';
import NumberFormat from './NumberFormat';

/**
 * The ViewColumn model module.
 * @module com.gridly.api/model/ViewColumn
 * @version 4.33.0
 */
class ViewColumn {
    /**
     * Constructs a new <code>ViewColumn</code>.
     * @alias module:com.gridly.api/model/ViewColumn
     */
    constructor() { 
        
        ViewColumn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ViewColumn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.gridly.api/model/ViewColumn} obj Optional instance to populate.
     * @return {module:com.gridly.api/model/ViewColumn} The populated <code>ViewColumn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ViewColumn();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('dateTimeFormat')) {
                obj['dateTimeFormat'] = DateTimeFormat.constructFromObject(data['dateTimeFormat']);
            }
            if (data.hasOwnProperty('dependsOn')) {
                obj['dependsOn'] = ApiClient.convertToType(data['dependsOn'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('editable')) {
                obj['editable'] = ApiClient.convertToType(data['editable'], 'Boolean');
            }
            if (data.hasOwnProperty('formula')) {
                obj['formula'] = Formula.constructFromObject(data['formula']);
            }
            if (data.hasOwnProperty('isSource')) {
                obj['isSource'] = ApiClient.convertToType(data['isSource'], 'Boolean');
            }
            if (data.hasOwnProperty('isTarget')) {
                obj['isTarget'] = ApiClient.convertToType(data['isTarget'], 'Boolean');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('localizationType')) {
                obj['localizationType'] = ApiClient.convertToType(data['localizationType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numberFormat')) {
                obj['numberFormat'] = NumberFormat.constructFromObject(data['numberFormat']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ColumnReference.constructFromObject(data['reference']);
            }
            if (data.hasOwnProperty('selectionOptions')) {
                obj['selectionOptions'] = ApiClient.convertToType(data['selectionOptions'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ViewColumn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ViewColumn</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `dateTimeFormat`
        if (data['dateTimeFormat']) { // data not null
          DateTimeFormat.validateJSON(data['dateTimeFormat']);
        }
        // ensure the json data is a string
        if (data['dependsOn'] && !(typeof data['dependsOn'] === 'string' || data['dependsOn'] instanceof String)) {
            throw new Error("Expected the field `dependsOn` to be a primitive type in the JSON string but got " + data['dependsOn']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `formula`
        if (data['formula']) { // data not null
          Formula.validateJSON(data['formula']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['localizationType'] && !(typeof data['localizationType'] === 'string' || data['localizationType'] instanceof String)) {
            throw new Error("Expected the field `localizationType` to be a primitive type in the JSON string but got " + data['localizationType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `numberFormat`
        if (data['numberFormat']) { // data not null
          NumberFormat.validateJSON(data['numberFormat']);
        }
        // validate the optional field `reference`
        if (data['reference']) { // data not null
          ColumnReference.validateJSON(data['reference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['selectionOptions'])) {
            throw new Error("Expected the field `selectionOptions` to be an array in the JSON data but got " + data['selectionOptions']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
ViewColumn.prototype['id'] = undefined;

/**
 * @member {module:com.gridly.api/model/DateTimeFormat} dateTimeFormat
 */
ViewColumn.prototype['dateTimeFormat'] = undefined;

/**
 * @member {String} dependsOn
 */
ViewColumn.prototype['dependsOn'] = undefined;

/**
 * @member {String} description
 */
ViewColumn.prototype['description'] = undefined;

/**
 * @member {Boolean} editable
 */
ViewColumn.prototype['editable'] = undefined;

/**
 * @member {module:com.gridly.api/model/Formula} formula
 */
ViewColumn.prototype['formula'] = undefined;

/**
 * @member {Boolean} isSource
 */
ViewColumn.prototype['isSource'] = undefined;

/**
 * @member {Boolean} isTarget
 */
ViewColumn.prototype['isTarget'] = undefined;

/**
 * @member {String} languageCode
 */
ViewColumn.prototype['languageCode'] = undefined;

/**
 * @member {module:com.gridly.api/model/ViewColumn.LocalizationTypeEnum} localizationType
 */
ViewColumn.prototype['localizationType'] = undefined;

/**
 * @member {String} name
 */
ViewColumn.prototype['name'] = undefined;

/**
 * @member {module:com.gridly.api/model/NumberFormat} numberFormat
 */
ViewColumn.prototype['numberFormat'] = undefined;

/**
 * @member {module:com.gridly.api/model/ColumnReference} reference
 */
ViewColumn.prototype['reference'] = undefined;

/**
 * @member {Array.<String>} selectionOptions
 */
ViewColumn.prototype['selectionOptions'] = undefined;

/**
 * @member {module:com.gridly.api/model/ViewColumn.TypeEnum} type
 */
ViewColumn.prototype['type'] = undefined;





/**
 * Allowed values for the <code>localizationType</code> property.
 * @enum {String}
 * @readonly
 */
ViewColumn['LocalizationTypeEnum'] = {

    /**
     * value: "sourceLanguage"
     * @const
     */
    "sourceLanguage": "sourceLanguage",

    /**
     * value: "targetLanguage"
     * @const
     */
    "targetLanguage": "targetLanguage"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ViewColumn['TypeEnum'] = {

    /**
     * value: "singleLine"
     * @const
     */
    "singleLine": "singleLine",

    /**
     * value: "multipleLines"
     * @const
     */
    "multipleLines": "multipleLines",

    /**
     * value: "richText"
     * @const
     */
    "richText": "richText",

    /**
     * value: "markdown"
     * @const
     */
    "markdown": "markdown",

    /**
     * value: "singleSelection"
     * @const
     */
    "singleSelection": "singleSelection",

    /**
     * value: "multipleSelections"
     * @const
     */
    "multipleSelections": "multipleSelections",

    /**
     * value: "boolean"
     * @const
     */
    "boolean": "boolean",

    /**
     * value: "number"
     * @const
     */
    "number": "number",

    /**
     * value: "datetime"
     * @const
     */
    "datetime": "datetime",

    /**
     * value: "files"
     * @const
     */
    "files": "files",

    /**
     * value: "reference"
     * @const
     */
    "reference": "reference",

    /**
     * value: "lookup"
     * @const
     */
    "lookup": "lookup",

    /**
     * value: "language"
     * @const
     */
    "language": "language",

    /**
     * value: "json"
     * @const
     */
    "json": "json",

    /**
     * value: "yaml"
     * @const
     */
    "yaml": "yaml",

    /**
     * value: "html"
     * @const
     */
    "html": "html",

    /**
     * value: "formula"
     * @const
     */
    "formula": "formula"
};



export default ViewColumn;

