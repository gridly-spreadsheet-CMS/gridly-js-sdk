/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CDN model module.
 * @module com.gridly.api/model/CDN
 * @version 5.9.0
 */
class CDN {
    /**
     * Constructs a new <code>CDN</code>.
     * @alias module:com.gridly.api/model/CDN
     */
    constructor() { 
        
        CDN.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CDN</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.gridly.api/model/CDN} obj Optional instance to populate.
     * @return {module:com.gridly.api/model/CDN} The populated <code>CDN</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CDN();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('gridId')) {
                obj['gridId'] = ApiClient.convertToType(data['gridId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('lastGeneratedTime')) {
                obj['lastGeneratedTime'] = ApiClient.convertToType(data['lastGeneratedTime'], 'Date');
            }
            if (data.hasOwnProperty('lastPublishedTime')) {
                obj['lastPublishedTime'] = ApiClient.convertToType(data['lastPublishedTime'], 'Date');
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedBy')) {
                obj['lastModifiedBy'] = ApiClient.convertToType(data['lastModifiedBy'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('whiteListIP')) {
                obj['whiteListIP'] = ApiClient.convertToType(data['whiteListIP'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CDN</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CDN</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['gridId'] && !(typeof data['gridId'] === 'string' || data['gridId'] instanceof String)) {
            throw new Error("Expected the field `gridId` to be a primitive type in the JSON string but got " + data['gridId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['permission'] && !(typeof data['permission'] === 'string' || data['permission'] instanceof String)) {
            throw new Error("Expected the field `permission` to be a primitive type in the JSON string but got " + data['permission']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // ensure the json data is a string
        if (data['lastModifiedBy'] && !(typeof data['lastModifiedBy'] === 'string' || data['lastModifiedBy'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got " + data['lastModifiedBy']);
        }
        // ensure the json data is a string
        if (data['whiteListIP'] && !(typeof data['whiteListIP'] === 'string' || data['whiteListIP'] instanceof String)) {
            throw new Error("Expected the field `whiteListIP` to be a primitive type in the JSON string but got " + data['whiteListIP']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
CDN.prototype['id'] = undefined;

/**
 * @member {String} name
 */
CDN.prototype['name'] = undefined;

/**
 * @member {String} description
 */
CDN.prototype['description'] = undefined;

/**
 * @member {String} url
 */
CDN.prototype['url'] = undefined;

/**
 * @member {String} gridId
 */
CDN.prototype['gridId'] = undefined;

/**
 * @member {module:com.gridly.api/model/CDN.StatusEnum} status
 */
CDN.prototype['status'] = undefined;

/**
 * @member {Date} lastGeneratedTime
 */
CDN.prototype['lastGeneratedTime'] = undefined;

/**
 * @member {Date} lastPublishedTime
 */
CDN.prototype['lastPublishedTime'] = undefined;

/**
 * @member {module:com.gridly.api/model/CDN.PermissionEnum} permission
 */
CDN.prototype['permission'] = undefined;

/**
 * @member {String} type
 */
CDN.prototype['type'] = undefined;

/**
 * @member {Date} createdTime
 */
CDN.prototype['createdTime'] = undefined;

/**
 * @member {Date} lastModifiedTime
 */
CDN.prototype['lastModifiedTime'] = undefined;

/**
 * @member {String} createdBy
 */
CDN.prototype['createdBy'] = undefined;

/**
 * @member {String} lastModifiedBy
 */
CDN.prototype['lastModifiedBy'] = undefined;

/**
 * @member {Date} startTime
 */
CDN.prototype['startTime'] = undefined;

/**
 * @member {Date} endTime
 */
CDN.prototype['endTime'] = undefined;

/**
 * @member {String} whiteListIP
 */
CDN.prototype['whiteListIP'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CDN['StatusEnum'] = {

    /**
     * value: "readyToPublish"
     * @const
     */
    "readyToPublish": "readyToPublish",

    /**
     * value: "processing"
     * @const
     */
    "processing": "processing",

    /**
     * value: "published"
     * @const
     */
    "published": "published"
};


/**
 * Allowed values for the <code>permission</code> property.
 * @enum {String}
 * @readonly
 */
CDN['PermissionEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "private"
     * @const
     */
    "private": "private"
};



export default CDN;

