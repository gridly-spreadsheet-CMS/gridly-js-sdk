/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BranchDiffCell from './BranchDiffCell';

/**
 * The BranchDiffRecord model module.
 * @module com.gridly.api/model/BranchDiffRecord
 * @version 5.9.0
 */
class BranchDiffRecord {
    /**
     * Constructs a new <code>BranchDiffRecord</code>.
     * @alias module:com.gridly.api/model/BranchDiffRecord
     */
    constructor() { 
        
        BranchDiffRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BranchDiffRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.gridly.api/model/BranchDiffRecord} obj Optional instance to populate.
     * @return {module:com.gridly.api/model/BranchDiffRecord} The populated <code>BranchDiffRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BranchDiffRecord();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('cells')) {
                obj['cells'] = ApiClient.convertToType(data['cells'], [BranchDiffCell]);
            }
            if (data.hasOwnProperty('lastModifiedBy')) {
                obj['lastModifiedBy'] = ApiClient.convertToType(data['lastModifiedBy'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BranchDiffRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BranchDiffRecord</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        if (data['cells']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cells'])) {
                throw new Error("Expected the field `cells` to be an array in the JSON data but got " + data['cells']);
            }
            // validate the optional field `cells` (array)
            for (const item of data['cells']) {
                BranchDiffCell.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['lastModifiedBy'] && !(typeof data['lastModifiedBy'] === 'string' || data['lastModifiedBy'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got " + data['lastModifiedBy']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
BranchDiffRecord.prototype['id'] = undefined;

/**
 * @member {String} path
 */
BranchDiffRecord.prototype['path'] = undefined;

/**
 * @member {module:com.gridly.api/model/BranchDiffRecord.StatusEnum} status
 */
BranchDiffRecord.prototype['status'] = undefined;

/**
 * @member {Array.<module:com.gridly.api/model/BranchDiffCell>} cells
 */
BranchDiffRecord.prototype['cells'] = undefined;

/**
 * @member {String} lastModifiedBy
 */
BranchDiffRecord.prototype['lastModifiedBy'] = undefined;

/**
 * @member {Date} lastModifiedTime
 */
BranchDiffRecord.prototype['lastModifiedTime'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
BranchDiffRecord['StatusEnum'] = {

    /**
     * value: "added"
     * @const
     */
    "added": "added",

    /**
     * value: "updated"
     * @const
     */
    "updated": "updated",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted",

    /**
     * value: "duplicated"
     * @const
     */
    "duplicated": "duplicated",

    /**
     * value: "exceededLengthId"
     * @const
     */
    "exceededLengthId": "exceededLengthId",

    /**
     * value: "merged"
     * @const
     */
    "merged": "merged",

    /**
     * value: "identifierUpdated"
     * @const
     */
    "identifierUpdated": "identifierUpdated"
};



export default BranchDiffRecord;

