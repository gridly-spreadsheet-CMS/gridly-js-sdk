/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Group model module.
 * @module com.gridly.api/model/Group
 * @version 5.9.0
 */
class Group {
    /**
     * Constructs a new <code>Group</code>.
     * @alias module:com.gridly.api/model/Group
     */
    constructor() { 
        
        Group.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Group</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.gridly.api/model/Group} obj Optional instance to populate.
     * @return {module:com.gridly.api/model/Group} The populated <code>Group</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Group();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'Number');
            }
            if (data.hasOwnProperty('companyId')) {
                obj['companyId'] = ApiClient.convertToType(data['companyId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('logoUrl')) {
                obj['logoUrl'] = ApiClient.convertToType(data['logoUrl'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('shareType')) {
                obj['shareType'] = ApiClient.convertToType(data['shareType'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('lastModifiedDate')) {
                obj['lastModifiedDate'] = ApiClient.convertToType(data['lastModifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('systemGroup')) {
                obj['systemGroup'] = ApiClient.convertToType(data['systemGroup'], 'Boolean');
            }
            if (data.hasOwnProperty('isSystemGroup')) {
                obj['isSystemGroup'] = ApiClient.convertToType(data['isSystemGroup'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Group</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Group</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['logoUrl'] && !(typeof data['logoUrl'] === 'string' || data['logoUrl'] instanceof String)) {
            throw new Error("Expected the field `logoUrl` to be a primitive type in the JSON string but got " + data['logoUrl']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['shareType'] && !(typeof data['shareType'] === 'string' || data['shareType'] instanceof String)) {
            throw new Error("Expected the field `shareType` to be a primitive type in the JSON string but got " + data['shareType']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
Group.prototype['id'] = undefined;

/**
 * @member {Number} groupId
 */
Group.prototype['groupId'] = undefined;

/**
 * @member {Number} companyId
 */
Group.prototype['companyId'] = undefined;

/**
 * @member {String} name
 */
Group.prototype['name'] = undefined;

/**
 * @member {String} logoUrl
 */
Group.prototype['logoUrl'] = undefined;

/**
 * @member {module:com.gridly.api/model/Group.TypeEnum} type
 */
Group.prototype['type'] = undefined;

/**
 * @member {module:com.gridly.api/model/Group.ShareTypeEnum} shareType
 */
Group.prototype['shareType'] = undefined;

/**
 * @member {Date} createdDate
 */
Group.prototype['createdDate'] = undefined;

/**
 * @member {Date} lastModifiedDate
 */
Group.prototype['lastModifiedDate'] = undefined;

/**
 * @member {Boolean} systemGroup
 */
Group.prototype['systemGroup'] = undefined;

/**
 * @member {Boolean} isSystemGroup
 */
Group.prototype['isSystemGroup'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Group['TypeEnum'] = {

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "ADMIN"
     * @const
     */
    "ADMIN": "ADMIN"
};


/**
 * Allowed values for the <code>shareType</code> property.
 * @enum {String}
 * @readonly
 */
Group['ShareTypeEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "full"
     * @const
     */
    "full": "full",

    /**
     * value: "project"
     * @const
     */
    "project": "project",

    /**
     * value: "database"
     * @const
     */
    "database": "database",

    /**
     * value: "grid"
     * @const
     */
    "grid": "grid",

    /**
     * value: "view"
     * @const
     */
    "view": "view"
};



export default Group;

