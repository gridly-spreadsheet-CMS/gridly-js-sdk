/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.21.5
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReferencedColumn from './ReferencedColumn';
import ReferencedGrid from './ReferencedGrid';

/**
 * The ColumnReference model module.
 * @module com.gridly.api/model/ColumnReference
 * @version 4.21.5
 */
class ColumnReference {
    /**
     * Constructs a new <code>ColumnReference</code>.
     * @alias module:com.gridly.api/model/ColumnReference
     */
    constructor() { 
        
        ColumnReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ColumnReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.gridly.api/model/ColumnReference} obj Optional instance to populate.
     * @return {module:com.gridly.api/model/ColumnReference} The populated <code>ColumnReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColumnReference();

            if (data.hasOwnProperty('grid')) {
                obj['grid'] = ReferencedGrid.constructFromObject(data['grid']);
            }
            if (data.hasOwnProperty('column')) {
                obj['column'] = ReferencedColumn.constructFromObject(data['column']);
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ReferencedGrid.constructFromObject(data['branch']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('selectionType')) {
                obj['selectionType'] = ApiClient.convertToType(data['selectionType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:com.gridly.api/model/ReferencedGrid} grid
 */
ColumnReference.prototype['grid'] = undefined;

/**
 * @member {module:com.gridly.api/model/ReferencedColumn} column
 */
ColumnReference.prototype['column'] = undefined;

/**
 * @member {module:com.gridly.api/model/ReferencedGrid} branch
 */
ColumnReference.prototype['branch'] = undefined;

/**
 * @member {module:com.gridly.api/model/ColumnReference.TypeEnum} type
 */
ColumnReference.prototype['type'] = undefined;

/**
 * @member {module:com.gridly.api/model/ColumnReference.SelectionTypeEnum} selectionType
 */
ColumnReference.prototype['selectionType'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ColumnReference['TypeEnum'] = {

    /**
     * value: "ROW"
     * @const
     */
    "ROW": "ROW",

    /**
     * value: "CELL"
     * @const
     */
    "CELL": "CELL"
};


/**
 * Allowed values for the <code>selectionType</code> property.
 * @enum {String}
 * @readonly
 */
ColumnReference['SelectionTypeEnum'] = {

    /**
     * value: "SINGLE"
     * @const
     */
    "SINGLE": "SINGLE",

    /**
     * value: "MULTIPLE"
     * @const
     */
    "MULTIPLE": "MULTIPLE"
};



export default ColumnReference;

