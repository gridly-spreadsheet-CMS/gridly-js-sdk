/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.29.1
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteFile from '../model/DeleteFile';
import Record from '../model/Record';
import UploadedFile from '../model/UploadedFile';

/**
* ViewFile service.
* @module com.gridly.api/service/ViewFileApi
* @version 4.29.1
*/
export default class ViewFileApi {

    /**
    * Constructs a new ViewFileApi. 
    * @alias module:com.gridly.api/service/ViewFileApi
    * @class
    * @param {module:com.gridly.api/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.gridly.api/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * delete
     * delete
     * @param {String} columnId columnId
     * @param {String} recordId recordId
     * @param {String} viewId viewId
     * @param {module:com.gridly.api/model/DeleteFile} deleteFile 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    callDeleteWithHttpInfo(columnId, recordId, viewId, deleteFile) {
      let postBody = deleteFile;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling callDelete");
      }
      // verify the required parameter 'recordId' is set
      if (recordId === undefined || recordId === null) {
        throw new Error("Missing the required parameter 'recordId' when calling callDelete");
      }
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling callDelete");
      }
      // verify the required parameter 'deleteFile' is set
      if (deleteFile === undefined || deleteFile === null) {
        throw new Error("Missing the required parameter 'deleteFile' when calling callDelete");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
        'columnId': columnId,
        'recordId': recordId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/files', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete
     * delete
     * @param {String} columnId columnId
     * @param {String} recordId recordId
     * @param {String} viewId viewId
     * @param {module:com.gridly.api/model/DeleteFile} deleteFile 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    callDelete(columnId, recordId, viewId, deleteFile) {
      return this.callDeleteWithHttpInfo(columnId, recordId, viewId, deleteFile)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * download
     * download
     * @param {String} fileId fileId
     * @param {String} viewId viewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadWithHttpInfo(fileId, viewId) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling download");
      }
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling download");
      }

      let pathParams = {
        'fileId': fileId,
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/files/{fileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * download
     * download
     * @param {String} fileId fileId
     * @param {String} viewId viewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    download(fileId, viewId) {
      return this.downloadWithHttpInfo(fileId, viewId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * upload
     * upload
     * @param {String} viewId viewId
     * @param {String} columnId columnId
     * @param {String} recordId recordId
     * @param {File} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/UploadedFile} and HTTP response
     */
    uploadWithHttpInfo(viewId, columnId, recordId, file) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling upload");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling upload");
      }
      // verify the required parameter 'recordId' is set
      if (recordId === undefined || recordId === null) {
        throw new Error("Missing the required parameter 'recordId' when calling upload");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling upload");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
        'columnId': columnId,
        'recordId': recordId
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UploadedFile;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * upload
     * upload
     * @param {String} viewId viewId
     * @param {String} columnId columnId
     * @param {String} recordId recordId
     * @param {File} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/UploadedFile}
     */
    upload(viewId, columnId, recordId, file) {
      return this.uploadWithHttpInfo(viewId, columnId, recordId, file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * uploadZip
     * uploadZip
     * @param {String} viewId viewId
     * @param {String} columnId 
     * @param {String} fileMappings 
     * @param {File} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/Record>} and HTTP response
     */
    uploadZipWithHttpInfo(viewId, columnId, fileMappings, file) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling uploadZip");
      }
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling uploadZip");
      }
      // verify the required parameter 'fileMappings' is set
      if (fileMappings === undefined || fileMappings === null) {
        throw new Error("Missing the required parameter 'fileMappings' when calling uploadZip");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadZip");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'columnId': columnId,
        'fileMappings': fileMappings,
        'file': file
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['multipart/form-data', 'application/json'];
      let accepts = ['application/json'];
      let returnType = [Record];
      return this.apiClient.callApi(
        '/v1/views/{viewId}/files/zip', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * uploadZip
     * uploadZip
     * @param {String} viewId viewId
     * @param {String} columnId 
     * @param {String} fileMappings 
     * @param {File} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/Record>}
     */
    uploadZip(viewId, columnId, fileMappings, file) {
      return this.uploadZipWithHttpInfo(viewId, columnId, fileMappings, file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
