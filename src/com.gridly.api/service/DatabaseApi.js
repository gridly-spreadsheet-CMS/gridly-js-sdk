/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDatabase from '../model/CreateDatabase';
import Database from '../model/Database';
import UpdateDatabase from '../model/UpdateDatabase';

/**
* Database service.
* @module com.gridly.api/service/DatabaseApi
* @version 5.9.0
*/
export default class DatabaseApi {

    /**
    * Constructs a new DatabaseApi. 
    * @alias module:com.gridly.api/service/DatabaseApi
    * @class
    * @param {module:com.gridly.api/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.gridly.api/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * delete
     * @param {String} dbId dbId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    callDeleteWithHttpInfo(dbId) {
      let postBody = null;
      // verify the required parameter 'dbId' is set
      if (dbId === undefined || dbId === null) {
        throw new Error("Missing the required parameter 'dbId' when calling callDelete");
      }

      let pathParams = {
        'dbId': dbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/databases/{dbId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete
     * @param {String} dbId dbId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    callDelete(dbId) {
      return this.callDeleteWithHttpInfo(dbId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create
     * @param {Number} projectId projectId
     * @param {module:com.gridly.api/model/CreateDatabase} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Database} and HTTP response
     */
    createWithHttpInfo(projectId, body) {
      let postBody = body;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling create");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
        'projectId': projectId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/v1/databases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create
     * @param {Number} projectId projectId
     * @param {module:com.gridly.api/model/CreateDatabase} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Database}
     */
    create(projectId, body) {
      return this.createWithHttpInfo(projectId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * duplicate
     * @param {String} dbId dbId
     * @param {Number} projectId projectId
     * @param {module:com.gridly.api/model/CreateDatabase} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Database} and HTTP response
     */
    duplicateWithHttpInfo(dbId, projectId, body) {
      let postBody = body;
      // verify the required parameter 'dbId' is set
      if (dbId === undefined || dbId === null) {
        throw new Error("Missing the required parameter 'dbId' when calling duplicate");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling duplicate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling duplicate");
      }

      let pathParams = {
        'dbId': dbId
      };
      let queryParams = {
        'projectId': projectId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/v1/databases/{dbId}/duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * duplicate
     * @param {String} dbId dbId
     * @param {Number} projectId projectId
     * @param {module:com.gridly.api/model/CreateDatabase} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Database}
     */
    duplicate(dbId, projectId, body) {
      return this.duplicateWithHttpInfo(dbId, projectId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get
     * @param {String} dbId dbId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Database} and HTTP response
     */
    getWithHttpInfo(dbId) {
      let postBody = null;
      // verify the required parameter 'dbId' is set
      if (dbId === undefined || dbId === null) {
        throw new Error("Missing the required parameter 'dbId' when calling get");
      }

      let pathParams = {
        'dbId': dbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/v1/databases/{dbId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get
     * @param {String} dbId dbId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Database}
     */
    get(dbId) {
      return this.getWithHttpInfo(dbId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.gridly.api/model/String>} opts.expand expand
     * @param {String} opts.page page (default to '')
     * @param {Number} opts.projectId projectId
     * @param {String} opts.search search
     * @param {String} opts.sort sort (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/Database>} and HTTP response
     */
    listWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': this.apiClient.buildCollectionParam(opts['expand'], 'multi'),
        'page': opts['page'],
        'projectId': opts['projectId'],
        'search': opts['search'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Database];
      return this.apiClient.callApi(
        '/v1/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.gridly.api/model/String>} opts.expand expand
     * @param {String} opts.page page (default to '')
     * @param {Number} opts.projectId projectId
     * @param {String} opts.search search
     * @param {String} opts.sort sort (default to '')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/Database>}
     */
    list(opts) {
      return this.listWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update
     * @param {String} dbId dbId
     * @param {module:com.gridly.api/model/UpdateDatabase} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Database} and HTTP response
     */
    updateWithHttpInfo(dbId, body) {
      let postBody = body;
      // verify the required parameter 'dbId' is set
      if (dbId === undefined || dbId === null) {
        throw new Error("Missing the required parameter 'dbId' when calling update");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling update");
      }

      let pathParams = {
        'dbId': dbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/v1/databases/{dbId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update
     * @param {String} dbId dbId
     * @param {module:com.gridly.api/model/UpdateDatabase} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Database}
     */
    update(dbId, body) {
      return this.updateWithHttpInfo(dbId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
