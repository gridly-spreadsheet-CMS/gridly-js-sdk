/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateFileCategory from '../model/CreateFileCategory';
import CreateGrid from '../model/CreateGrid';
import FileCategory from '../model/FileCategory';
import Grid from '../model/Grid';
import GridSetting from '../model/GridSetting';
import SettingFile from '../model/SettingFile';
import UpdateCategory from '../model/UpdateCategory';
import UpdateGrid from '../model/UpdateGrid';
import UpdateGridSetting from '../model/UpdateGridSetting';
import UploadSettingFileRequest from '../model/UploadSettingFileRequest';
import UploadedFile from '../model/UploadedFile';

/**
* Grid service.
* @module com.gridly.api/service/GridApi
* @version 5.9.0
*/
export default class GridApi {

    /**
    * Constructs a new GridApi. 
    * @alias module:com.gridly.api/service/GridApi
    * @class
    * @param {module:com.gridly.api/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.gridly.api/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * delete
     * Delete a Grid
     * @param {String} gridId gridId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    callDeleteWithHttpInfo(gridId) {
      let postBody = null;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling callDelete");
      }

      let pathParams = {
        'gridId': gridId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/grids/{gridId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete
     * Delete a Grid
     * @param {String} gridId gridId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    callDelete(gridId) {
      return this.callDeleteWithHttpInfo(gridId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create
     * Create a Grid
     * @param {String} dbId dbId
     * @param {module:com.gridly.api/model/CreateGrid} createGrid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Grid} and HTTP response
     */
    createWithHttpInfo(dbId, createGrid) {
      let postBody = createGrid;
      // verify the required parameter 'dbId' is set
      if (dbId === undefined || dbId === null) {
        throw new Error("Missing the required parameter 'dbId' when calling create");
      }
      // verify the required parameter 'createGrid' is set
      if (createGrid === undefined || createGrid === null) {
        throw new Error("Missing the required parameter 'createGrid' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
        'dbId': dbId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Grid;
      return this.apiClient.callApi(
        '/v1/grids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create
     * Create a Grid
     * @param {String} dbId dbId
     * @param {module:com.gridly.api/model/CreateGrid} createGrid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Grid}
     */
    create(dbId, createGrid) {
      return this.createWithHttpInfo(dbId, createGrid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * createCategory
     * createCategory
     * @param {String} gridId gridId
     * @param {module:com.gridly.api/model/CreateFileCategory} createFileCategory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/FileCategory} and HTTP response
     */
    createCategoryWithHttpInfo(gridId, createFileCategory) {
      let postBody = createFileCategory;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling createCategory");
      }
      // verify the required parameter 'createFileCategory' is set
      if (createFileCategory === undefined || createFileCategory === null) {
        throw new Error("Missing the required parameter 'createFileCategory' when calling createCategory");
      }

      let pathParams = {
        'gridId': gridId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileCategory;
      return this.apiClient.callApi(
        '/v1/grids/{gridId}/settings/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * createCategory
     * createCategory
     * @param {String} gridId gridId
     * @param {module:com.gridly.api/model/CreateFileCategory} createFileCategory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/FileCategory}
     */
    createCategory(gridId, createFileCategory) {
      return this.createCategoryWithHttpInfo(gridId, createFileCategory)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * deleteCategory
     * deleteCategory
     * @param {String} gridId gridId
     * @param {String} categoryId categoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCategoryWithHttpInfo(gridId, categoryId) {
      let postBody = null;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling deleteCategory");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteCategory");
      }

      let pathParams = {
        'gridId': gridId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/grids/{gridId}/settings/categories/{categoryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * deleteCategory
     * deleteCategory
     * @param {String} gridId gridId
     * @param {String} categoryId categoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCategory(gridId, categoryId) {
      return this.deleteCategoryWithHttpInfo(gridId, categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * deleteFile
     * deleteFile
     * @param {String} gridId gridId
     * @param {String} categoryId categoryId
     * @param {String} fileId fileId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteFileWithHttpInfo(gridId, categoryId, fileId) {
      let postBody = null;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling deleteFile");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteFile");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling deleteFile");
      }

      let pathParams = {
        'gridId': gridId,
        'categoryId': categoryId,
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/grids/{gridId}/settings/categories/{categoryId}/files/{fileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * deleteFile
     * deleteFile
     * @param {String} gridId gridId
     * @param {String} categoryId categoryId
     * @param {String} fileId fileId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteFile(gridId, categoryId, fileId) {
      return this.deleteFileWithHttpInfo(gridId, categoryId, fileId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get
     * Get a Grid
     * @param {String} gridId gridId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Grid} and HTTP response
     */
    getWithHttpInfo(gridId) {
      let postBody = null;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling get");
      }

      let pathParams = {
        'gridId': gridId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Grid;
      return this.apiClient.callApi(
        '/v1/grids/{gridId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get
     * Get a Grid
     * @param {String} gridId gridId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Grid}
     */
    get(gridId) {
      return this.getWithHttpInfo(gridId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getSetting
     * getSetting
     * @param {String} gridId gridId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/GridSetting} and HTTP response
     */
    getSettingWithHttpInfo(gridId) {
      let postBody = null;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling getSetting");
      }

      let pathParams = {
        'gridId': gridId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GridSetting;
      return this.apiClient.callApi(
        '/v1/grids/{gridId}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * getSetting
     * getSetting
     * @param {String} gridId gridId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/GridSetting}
     */
    getSetting(gridId) {
      return this.getSettingWithHttpInfo(gridId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list
     * Get a Grid
     * @param {String} dbId dbId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/Grid>} and HTTP response
     */
    listWithHttpInfo(dbId) {
      let postBody = null;
      // verify the required parameter 'dbId' is set
      if (dbId === undefined || dbId === null) {
        throw new Error("Missing the required parameter 'dbId' when calling list");
      }

      let pathParams = {
      };
      let queryParams = {
        'dbId': dbId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Grid];
      return this.apiClient.callApi(
        '/v1/grids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list
     * Get a Grid
     * @param {String} dbId dbId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/Grid>}
     */
    list(dbId) {
      return this.listWithHttpInfo(dbId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * listFiles
     * listFiles
     * @param {String} gridId gridId
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.categoryId categoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/SettingFile>} and HTTP response
     */
    listFilesWithHttpInfo(gridId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling listFiles");
      }

      let pathParams = {
        'gridId': gridId
      };
      let queryParams = {
        'categoryId': this.apiClient.buildCollectionParam(opts['categoryId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SettingFile];
      return this.apiClient.callApi(
        '/v1/grids/{gridId}/settings/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * listFiles
     * listFiles
     * @param {String} gridId gridId
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.categoryId categoryId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/SettingFile>}
     */
    listFiles(gridId, opts) {
      return this.listFilesWithHttpInfo(gridId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * listTemplateGrids
     * listTemplateGrids
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/Grid>} and HTTP response
     */
    listTemplateGridsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Grid];
      return this.apiClient.callApi(
        '/v1/template-grids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * listTemplateGrids
     * listTemplateGrids
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/Grid>}
     */
    listTemplateGrids() {
      return this.listTemplateGridsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update
     * Update a Grid
     * @param {String} gridId gridId
     * @param {module:com.gridly.api/model/UpdateGrid} updateGrid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Grid} and HTTP response
     */
    updateWithHttpInfo(gridId, updateGrid) {
      let postBody = updateGrid;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling update");
      }
      // verify the required parameter 'updateGrid' is set
      if (updateGrid === undefined || updateGrid === null) {
        throw new Error("Missing the required parameter 'updateGrid' when calling update");
      }

      let pathParams = {
        'gridId': gridId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Grid;
      return this.apiClient.callApi(
        '/v1/grids/{gridId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update
     * Update a Grid
     * @param {String} gridId gridId
     * @param {module:com.gridly.api/model/UpdateGrid} updateGrid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Grid}
     */
    update(gridId, updateGrid) {
      return this.updateWithHttpInfo(gridId, updateGrid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updateCategory
     * updateCategory
     * @param {String} gridId gridId
     * @param {String} categoryId categoryId
     * @param {module:com.gridly.api/model/UpdateCategory} updateCategory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/FileCategory} and HTTP response
     */
    updateCategoryWithHttpInfo(gridId, categoryId, updateCategory) {
      let postBody = updateCategory;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling updateCategory");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling updateCategory");
      }
      // verify the required parameter 'updateCategory' is set
      if (updateCategory === undefined || updateCategory === null) {
        throw new Error("Missing the required parameter 'updateCategory' when calling updateCategory");
      }

      let pathParams = {
        'gridId': gridId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FileCategory;
      return this.apiClient.callApi(
        '/v1/grids/{gridId}/settings/categories/{categoryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * updateCategory
     * updateCategory
     * @param {String} gridId gridId
     * @param {String} categoryId categoryId
     * @param {module:com.gridly.api/model/UpdateCategory} updateCategory 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/FileCategory}
     */
    updateCategory(gridId, categoryId, updateCategory) {
      return this.updateCategoryWithHttpInfo(gridId, categoryId, updateCategory)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updateSetting
     * updateSetting
     * @param {String} gridId gridId
     * @param {module:com.gridly.api/model/UpdateGridSetting} updateGridSetting 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/GridSetting} and HTTP response
     */
    updateSettingWithHttpInfo(gridId, updateGridSetting) {
      let postBody = updateGridSetting;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling updateSetting");
      }
      // verify the required parameter 'updateGridSetting' is set
      if (updateGridSetting === undefined || updateGridSetting === null) {
        throw new Error("Missing the required parameter 'updateGridSetting' when calling updateSetting");
      }

      let pathParams = {
        'gridId': gridId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GridSetting;
      return this.apiClient.callApi(
        '/v1/grids/{gridId}/settings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * updateSetting
     * updateSetting
     * @param {String} gridId gridId
     * @param {module:com.gridly.api/model/UpdateGridSetting} updateGridSetting 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/GridSetting}
     */
    updateSetting(gridId, updateGridSetting) {
      return this.updateSettingWithHttpInfo(gridId, updateGridSetting)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * uploadSettingFile
     * uploadSettingFile
     * @param {String} gridId gridId
     * @param {String} categoryId categoryId
     * @param {module:com.gridly.api/model/UploadSettingFileRequest} uploadSettingFileRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/UploadedFile} and HTTP response
     */
    uploadSettingFileWithHttpInfo(gridId, categoryId, uploadSettingFileRequest) {
      let postBody = uploadSettingFileRequest;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling uploadSettingFile");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling uploadSettingFile");
      }
      // verify the required parameter 'uploadSettingFileRequest' is set
      if (uploadSettingFileRequest === undefined || uploadSettingFileRequest === null) {
        throw new Error("Missing the required parameter 'uploadSettingFileRequest' when calling uploadSettingFile");
      }

      let pathParams = {
        'gridId': gridId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadedFile;
      return this.apiClient.callApi(
        '/v1/grids/{gridId}/settings/categories/{categoryId}/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * uploadSettingFile
     * uploadSettingFile
     * @param {String} gridId gridId
     * @param {String} categoryId categoryId
     * @param {module:com.gridly.api/model/UploadSettingFileRequest} uploadSettingFileRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/UploadedFile}
     */
    uploadSettingFile(gridId, categoryId, uploadSettingFileRequest) {
      return this.uploadSettingFileWithHttpInfo(gridId, categoryId, uploadSettingFileRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
