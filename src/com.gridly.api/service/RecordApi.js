/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteRecord from '../model/DeleteRecord';
import FetchFileOption from '../model/FetchFileOption';
import FetchRecordHistoryRequest from '../model/FetchRecordHistoryRequest';
import Record from '../model/Record';
import RecordHistory from '../model/RecordHistory';
import SetRecord from '../model/SetRecord';

/**
* Record service.
* @module com.gridly.api/service/RecordApi
* @version 5.9.0
*/
export default class RecordApi {

    /**
    * Constructs a new RecordApi. 
    * @alias module:com.gridly.api/service/RecordApi
    * @class
    * @param {module:com.gridly.api/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.gridly.api/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * delete
     * delete
     * @param {String} viewId viewId
     * @param {module:com.gridly.api/model/DeleteRecord} deleteRecord 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    callDeleteWithHttpInfo(viewId, deleteRecord) {
      let postBody = deleteRecord;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling callDelete");
      }
      // verify the required parameter 'deleteRecord' is set
      if (deleteRecord === undefined || deleteRecord === null) {
        throw new Error("Missing the required parameter 'deleteRecord' when calling callDelete");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/records', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete
     * delete
     * @param {String} viewId viewId
     * @param {module:com.gridly.api/model/DeleteRecord} deleteRecord 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    callDelete(viewId, deleteRecord) {
      return this.callDeleteWithHttpInfo(viewId, deleteRecord)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create
     * create
     * @param {String} viewId viewId
     * @param {Array.<module:com.gridly.api/model/SetRecord>} createRecords createRecords
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/Record>} and HTTP response
     */
    createWithHttpInfo(viewId, createRecords) {
      let postBody = createRecords;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling create");
      }
      // verify the required parameter 'createRecords' is set
      if (createRecords === undefined || createRecords === null) {
        throw new Error("Missing the required parameter 'createRecords' when calling create");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Record];
      return this.apiClient.callApi(
        '/v1/views/{viewId}/records', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create
     * create
     * @param {String} viewId viewId
     * @param {Array.<module:com.gridly.api/model/SetRecord>} createRecords createRecords
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/Record>}
     */
    create(viewId, createRecords) {
      return this.createWithHttpInfo(viewId, createRecords)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * fetch
     * fetch
     * @param {String} viewId viewId
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.columnIds columnIds
     * @param {String} opts.page page (default to '{}')
     * @param {String} opts.query query (default to '{}')
     * @param {String} opts.sort sort (default to '{}')
     * @param {module:com.gridly.api/model/FetchFileOption} opts.fetchFileOption fetchFileOption
     * @param {String} opts.afterRecordId afterRecordId
     * @param {String} opts.beforeRecordId beforeRecordId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/Record>} and HTTP response
     */
    fetchWithHttpInfo(viewId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling fetch");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
        'columnIds': this.apiClient.buildCollectionParam(opts['columnIds'], 'multi'),
        'page': opts['page'],
        'query': opts['query'],
        'sort': opts['sort'],
        'fetchFileOption': opts['fetchFileOption'],
        'afterRecordId': opts['afterRecordId'],
        'beforeRecordId': opts['beforeRecordId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Record];
      return this.apiClient.callApi(
        '/v1/views/{viewId}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * fetch
     * fetch
     * @param {String} viewId viewId
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.columnIds columnIds
     * @param {String} opts.page page (default to '{}')
     * @param {String} opts.query query (default to '{}')
     * @param {String} opts.sort sort (default to '{}')
     * @param {module:com.gridly.api/model/FetchFileOption} opts.fetchFileOption fetchFileOption
     * @param {String} opts.afterRecordId afterRecordId
     * @param {String} opts.beforeRecordId beforeRecordId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/Record>}
     */
    fetch(viewId, opts) {
      return this.fetchWithHttpInfo(viewId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * fetchHistories
     * fetchHistories
     * @param {String} viewId viewId
     * @param {String} recordId recordId
     * @param {Object.<String, module:com.gridly.api/model/FetchRecordHistoryRequest>} fetchRequest fetchRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/RecordHistory>} and HTTP response
     */
    fetchHistoriesWithHttpInfo(viewId, recordId, fetchRequest) {
      let postBody = null;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling fetchHistories");
      }
      // verify the required parameter 'recordId' is set
      if (recordId === undefined || recordId === null) {
        throw new Error("Missing the required parameter 'recordId' when calling fetchHistories");
      }
      // verify the required parameter 'fetchRequest' is set
      if (fetchRequest === undefined || fetchRequest === null) {
        throw new Error("Missing the required parameter 'fetchRequest' when calling fetchHistories");
      }

      let pathParams = {
        'viewId': viewId,
        'recordId': recordId
      };
      let queryParams = {
        'fetchRequest': fetchRequest
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RecordHistory];
      return this.apiClient.callApi(
        '/v1/views/{viewId}/records/{recordId}/histories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * fetchHistories
     * fetchHistories
     * @param {String} viewId viewId
     * @param {String} recordId recordId
     * @param {Object.<String, module:com.gridly.api/model/FetchRecordHistoryRequest>} fetchRequest fetchRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/RecordHistory>}
     */
    fetchHistories(viewId, recordId, fetchRequest) {
      return this.fetchHistoriesWithHttpInfo(viewId, recordId, fetchRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update
     * update
     * @param {String} viewId viewId
     * @param {Array.<module:com.gridly.api/model/SetRecord>} setRecord 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/Record>} and HTTP response
     */
    updateWithHttpInfo(viewId, setRecord) {
      let postBody = setRecord;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling update");
      }
      // verify the required parameter 'setRecord' is set
      if (setRecord === undefined || setRecord === null) {
        throw new Error("Missing the required parameter 'setRecord' when calling update");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Record];
      return this.apiClient.callApi(
        '/v1/views/{viewId}/records', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update
     * update
     * @param {String} viewId viewId
     * @param {Array.<module:com.gridly.api/model/SetRecord>} setRecord 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/Record>}
     */
    update(viewId, setRecord) {
      return this.updateWithHttpInfo(viewId, setRecord)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * updateRecord
     * updateRecord
     * @param {String} id id
     * @param {String} viewId viewId
     * @param {module:com.gridly.api/model/SetRecord} setRecord 
     * @param {Object} opts Optional parameters
     * @param {String} opts.path path
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Record} and HTTP response
     */
    updateRecordWithHttpInfo(id, viewId, setRecord, opts) {
      opts = opts || {};
      let postBody = setRecord;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRecord");
      }
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling updateRecord");
      }
      // verify the required parameter 'setRecord' is set
      if (setRecord === undefined || setRecord === null) {
        throw new Error("Missing the required parameter 'setRecord' when calling updateRecord");
      }

      let pathParams = {
        'id': id,
        'viewId': viewId
      };
      let queryParams = {
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Record;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/records/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * updateRecord
     * updateRecord
     * @param {String} id id
     * @param {String} viewId viewId
     * @param {module:com.gridly.api/model/SetRecord} setRecord 
     * @param {Object} opts Optional parameters
     * @param {String} opts.path path
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Record}
     */
    updateRecord(id, viewId, setRecord, opts) {
      return this.updateRecordWithHttpInfo(id, viewId, setRecord, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
