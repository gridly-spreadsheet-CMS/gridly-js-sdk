/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.33.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTransMem from '../model/CreateTransMem';
import ExportFormat from '../model/ExportFormat';
import TransMem from '../model/TransMem';
import UpdateTransMem from '../model/UpdateTransMem';

/**
* Transmem service.
* @module com.gridly.api/service/TransmemApi
* @version 4.33.0
*/
export default class TransmemApi {

    /**
    * Constructs a new TransmemApi. 
    * @alias module:com.gridly.api/service/TransmemApi
    * @class
    * @param {module:com.gridly.api/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.gridly.api/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a translation memory by id
     * @param {String} tmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/TransMem} and HTTP response
     */
    callDeleteWithHttpInfo(tmId) {
      let postBody = null;
      // verify the required parameter 'tmId' is set
      if (tmId === undefined || tmId === null) {
        throw new Error("Missing the required parameter 'tmId' when calling callDelete");
      }

      let pathParams = {
        'tmId': tmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransMem;
      return this.apiClient.callApi(
        '/v1/transmems/{tmId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a translation memory by id
     * @param {String} tmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/TransMem}
     */
    callDelete(tmId) {
      return this.callDeleteWithHttpInfo(tmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export translation memory tmx file
     * @param {String} tmId 
     * @param {Object} opts Optional parameters
     * @param {module:com.gridly.api/model/ExportFormat} opts.format 
     * @param {String} opts.sourceLang 
     * @param {Array.<String>} opts.targetLangs 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    callExportWithHttpInfo(tmId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tmId' is set
      if (tmId === undefined || tmId === null) {
        throw new Error("Missing the required parameter 'tmId' when calling callExport");
      }

      let pathParams = {
        'tmId': tmId
      };
      let queryParams = {
        'format': opts['format'],
        'sourceLang': opts['sourceLang'],
        'targetLangs': this.apiClient.buildCollectionParam(opts['targetLangs'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/transmems/{tmId}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export translation memory tmx file
     * @param {String} tmId 
     * @param {Object} opts Optional parameters
     * @param {module:com.gridly.api/model/ExportFormat} opts.format 
     * @param {String} opts.sourceLang 
     * @param {Array.<String>} opts.targetLangs 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    callExport(tmId, opts) {
      return this.callExportWithHttpInfo(tmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Erases all the translation data of the provided tmId
     * @param {String} tmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cleanupWithHttpInfo(tmId) {
      let postBody = null;
      // verify the required parameter 'tmId' is set
      if (tmId === undefined || tmId === null) {
        throw new Error("Missing the required parameter 'tmId' when calling cleanup");
      }

      let pathParams = {
        'tmId': tmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/transmems/{tmId}/cleanup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Erases all the translation data of the provided tmId
     * @param {String} tmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    cleanup(tmId) {
      return this.cleanupWithHttpInfo(tmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new translation memory
     * @param {Object} opts Optional parameters
     * @param {module:com.gridly.api/model/CreateTransMem} opts.createTransMem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/TransMem} and HTTP response
     */
    createWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createTransMem'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransMem;
      return this.apiClient.callApi(
        '/v1/transmems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new translation memory
     * @param {Object} opts Optional parameters
     * @param {module:com.gridly.api/model/CreateTransMem} opts.createTransMem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/TransMem}
     */
    create(opts) {
      return this.createWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new translation memory by uploading tmx file
     * @param {File} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/TransMem} and HTTP response
     */
    createWithFileWithHttpInfo(file) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createWithFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TransMem;
      return this.apiClient.callApi(
        '/v1/transmems/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new translation memory by uploading tmx file
     * @param {File} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/TransMem}
     */
    createWithFile(file) {
      return this.createWithFileWithHttpInfo(file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get translation memory info by id
     * @param {String} tmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/TransMem} and HTTP response
     */
    getWithHttpInfo(tmId) {
      let postBody = null;
      // verify the required parameter 'tmId' is set
      if (tmId === undefined || tmId === null) {
        throw new Error("Missing the required parameter 'tmId' when calling get");
      }

      let pathParams = {
        'tmId': tmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransMem;
      return this.apiClient.callApi(
        '/v1/transmems/{tmId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get translation memory info by id
     * @param {String} tmId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/TransMem}
     */
    get(tmId) {
      return this.getWithHttpInfo(tmId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import a translation memory from tmx file
     * @param {String} tmId 
     * @param {Object.<String, Object>} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    importTmxWithHttpInfo(tmId, file) {
      let postBody = null;
      // verify the required parameter 'tmId' is set
      if (tmId === undefined || tmId === null) {
        throw new Error("Missing the required parameter 'tmId' when calling importTmx");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling importTmx");
      }

      let pathParams = {
        'tmId': tmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/transmems/{tmId}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import a translation memory from tmx file
     * @param {String} tmId 
     * @param {Object.<String, Object>} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    importTmx(tmId, file) {
      return this.importTmxWithHttpInfo(tmId, file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all available translation memories or create default one if there is no translation memory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/TransMem>} and HTTP response
     */
    listTMWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'projectId': opts['projectId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TransMem];
      return this.apiClient.callApi(
        '/v1/transmems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all available translation memories or create default one if there is no translation memory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.projectId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/TransMem>}
     */
    listTM(opts) {
      return this.listTMWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a translation memory
     * @param {String} tmId 
     * @param {Object} opts Optional parameters
     * @param {module:com.gridly.api/model/UpdateTransMem} opts.updateTransMem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/TransMem} and HTTP response
     */
    updateWithHttpInfo(tmId, opts) {
      opts = opts || {};
      let postBody = opts['updateTransMem'];
      // verify the required parameter 'tmId' is set
      if (tmId === undefined || tmId === null) {
        throw new Error("Missing the required parameter 'tmId' when calling update");
      }

      let pathParams = {
        'tmId': tmId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransMem;
      return this.apiClient.callApi(
        '/v1/transmems/{tmId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a translation memory
     * @param {String} tmId 
     * @param {Object} opts Optional parameters
     * @param {module:com.gridly.api/model/UpdateTransMem} opts.updateTransMem 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/TransMem}
     */
    update(tmId, opts) {
      return this.updateWithHttpInfo(tmId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
