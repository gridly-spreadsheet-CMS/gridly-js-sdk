/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 4.33.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Branch from '../model/Branch';
import BranchDiffRecord from '../model/BranchDiffRecord';
import CreateBranch from '../model/CreateBranch';
import MergeBranchRequest from '../model/MergeBranchRequest';
import Task from '../model/Task';

/**
* Branch service.
* @module com.gridly.api/service/BranchApi
* @version 4.33.0
*/
export default class BranchApi {

    /**
    * Constructs a new BranchApi. 
    * @alias module:com.gridly.api/service/BranchApi
    * @class
    * @param {module:com.gridly.api/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.gridly.api/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * delete
     * delete
     * @param {String} branchId branchId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    callDeleteWithHttpInfo(branchId) {
      let postBody = null;
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling callDelete");
      }

      let pathParams = {
        'branchId': branchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/branches/{branchId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete
     * delete
     * @param {String} branchId branchId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    callDelete(branchId) {
      return this.callDeleteWithHttpInfo(branchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create
     * create
     * @param {module:com.gridly.api/model/CreateBranch} createBranch 
     * @param {Object} opts Optional parameters
     * @param {String} opts.gridId gridId
     * @param {String} opts.branchId branchId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Branch} and HTTP response
     */
    createWithHttpInfo(createBranch, opts) {
      opts = opts || {};
      let postBody = createBranch;
      // verify the required parameter 'createBranch' is set
      if (createBranch === undefined || createBranch === null) {
        throw new Error("Missing the required parameter 'createBranch' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
        'gridId': opts['gridId'],
        'branchId': opts['branchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Branch;
      return this.apiClient.callApi(
        '/v1/branches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create
     * create
     * @param {module:com.gridly.api/model/CreateBranch} createBranch 
     * @param {Object} opts Optional parameters
     * @param {String} opts.gridId gridId
     * @param {String} opts.branchId branchId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Branch}
     */
    create(createBranch, opts) {
      return this.createWithHttpInfo(createBranch, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * createDiffCheck
     * createDiffCheck
     * @param {String} sourceViewId sourceViewId
     * @param {String} destinationViewId destinationViewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Task} and HTTP response
     */
    createDiffCheckWithHttpInfo(sourceViewId, destinationViewId) {
      let postBody = null;
      // verify the required parameter 'sourceViewId' is set
      if (sourceViewId === undefined || sourceViewId === null) {
        throw new Error("Missing the required parameter 'sourceViewId' when calling createDiffCheck");
      }
      // verify the required parameter 'destinationViewId' is set
      if (destinationViewId === undefined || destinationViewId === null) {
        throw new Error("Missing the required parameter 'destinationViewId' when calling createDiffCheck");
      }

      let pathParams = {
      };
      let queryParams = {
        'sourceViewId': sourceViewId,
        'destinationViewId': destinationViewId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Task;
      return this.apiClient.callApi(
        '/v1/branches/diffcheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * createDiffCheck
     * createDiffCheck
     * @param {String} sourceViewId sourceViewId
     * @param {String} destinationViewId destinationViewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Task}
     */
    createDiffCheck(sourceViewId, destinationViewId) {
      return this.createDiffCheckWithHttpInfo(sourceViewId, destinationViewId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get
     * get
     * @param {String} branchId branchId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Branch} and HTTP response
     */
    getWithHttpInfo(branchId) {
      let postBody = null;
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling get");
      }

      let pathParams = {
        'branchId': branchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Branch;
      return this.apiClient.callApi(
        '/v1/branches/{branchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get
     * get
     * @param {String} branchId branchId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Branch}
     */
    get(branchId) {
      return this.getWithHttpInfo(branchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getDiffCheck
     * getDiffCheck
     * @param {String} taskId taskId
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.gridly.api/model/String>} opts.mergeRecordOptions mergeRecordOptions
     * @param {String} opts.query query (default to '{}')
     * @param {String} opts.page page (default to '{}')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/BranchDiffRecord>} and HTTP response
     */
    getDiffCheckWithHttpInfo(taskId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getDiffCheck");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
        'mergeRecordOptions': this.apiClient.buildCollectionParam(opts['mergeRecordOptions'], 'multi'),
        'query': opts['query'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BranchDiffRecord];
      return this.apiClient.callApi(
        '/v1/branches/diffcheck/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * getDiffCheck
     * getDiffCheck
     * @param {String} taskId taskId
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.gridly.api/model/String>} opts.mergeRecordOptions mergeRecordOptions
     * @param {String} opts.query query (default to '{}')
     * @param {String} opts.page page (default to '{}')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/BranchDiffRecord>}
     */
    getDiffCheck(taskId, opts) {
      return this.getDiffCheckWithHttpInfo(taskId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list
     * list
     * @param {String} gridId gridId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/Branch>} and HTTP response
     */
    listWithHttpInfo(gridId) {
      let postBody = null;
      // verify the required parameter 'gridId' is set
      if (gridId === undefined || gridId === null) {
        throw new Error("Missing the required parameter 'gridId' when calling list");
      }

      let pathParams = {
      };
      let queryParams = {
        'gridId': gridId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Branch];
      return this.apiClient.callApi(
        '/v1/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list
     * list
     * @param {String} gridId gridId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/Branch>}
     */
    list(gridId) {
      return this.listWithHttpInfo(gridId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * merge
     * merge
     * @param {String} branchId branchId
     * @param {String} destinationBranchId destinationBranchId
     * @param {module:com.gridly.api/model/MergeBranchRequest} mergeBranchRequest 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.gridly.api/model/String>} opts.mergeRecordOptions mergeRecordOptions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/Task} and HTTP response
     */
    mergeWithHttpInfo(branchId, destinationBranchId, mergeBranchRequest, opts) {
      opts = opts || {};
      let postBody = mergeBranchRequest;
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling merge");
      }
      // verify the required parameter 'destinationBranchId' is set
      if (destinationBranchId === undefined || destinationBranchId === null) {
        throw new Error("Missing the required parameter 'destinationBranchId' when calling merge");
      }
      // verify the required parameter 'mergeBranchRequest' is set
      if (mergeBranchRequest === undefined || mergeBranchRequest === null) {
        throw new Error("Missing the required parameter 'mergeBranchRequest' when calling merge");
      }

      let pathParams = {
        'branchId': branchId
      };
      let queryParams = {
        'destinationBranchId': destinationBranchId,
        'mergeRecordOptions': this.apiClient.buildCollectionParam(opts['mergeRecordOptions'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Task;
      return this.apiClient.callApi(
        '/v1/branches/{branchId}/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * merge
     * merge
     * @param {String} branchId branchId
     * @param {String} destinationBranchId destinationBranchId
     * @param {module:com.gridly.api/model/MergeBranchRequest} mergeBranchRequest 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.gridly.api/model/String>} opts.mergeRecordOptions mergeRecordOptions
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/Task}
     */
    merge(branchId, destinationBranchId, mergeBranchRequest, opts) {
      return this.mergeWithHttpInfo(branchId, destinationBranchId, mergeBranchRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
