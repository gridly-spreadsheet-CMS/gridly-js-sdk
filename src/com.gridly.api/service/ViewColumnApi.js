/**
 * Gridly API
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 5.9.0
 * Contact: support@gridly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateColumn from '../model/CreateColumn';
import UpdateColumn from '../model/UpdateColumn';
import ViewColumn from '../model/ViewColumn';

/**
* ViewColumn service.
* @module com.gridly.api/service/ViewColumnApi
* @version 5.9.0
*/
export default class ViewColumnApi {

    /**
    * Constructs a new ViewColumnApi. 
    * @alias module:com.gridly.api/service/ViewColumnApi
    * @class
    * @param {module:com.gridly.api/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.gridly.api/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * add
     * add
     * @param {String} columnId columnId
     * @param {String} viewId viewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/ViewColumn} and HTTP response
     */
    addWithHttpInfo(columnId, viewId) {
      let postBody = null;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling add");
      }
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling add");
      }

      let pathParams = {
        'columnId': columnId,
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ViewColumn;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/columns/{columnId}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * add
     * add
     * @param {String} columnId columnId
     * @param {String} viewId viewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/ViewColumn}
     */
    add(columnId, viewId) {
      return this.addWithHttpInfo(columnId, viewId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * bulkCreate
     * bulkCreate
     * @param {String} viewId viewId
     * @param {Array.<module:com.gridly.api/model/CreateColumn>} createColumn 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:com.gridly.api/model/ViewColumn>} and HTTP response
     */
    bulkCreateWithHttpInfo(viewId, createColumn) {
      let postBody = createColumn;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling bulkCreate");
      }
      // verify the required parameter 'createColumn' is set
      if (createColumn === undefined || createColumn === null) {
        throw new Error("Missing the required parameter 'createColumn' when calling bulkCreate");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ViewColumn];
      return this.apiClient.callApi(
        '/v1/views/{viewId}/columns/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * bulkCreate
     * bulkCreate
     * @param {String} viewId viewId
     * @param {Array.<module:com.gridly.api/model/CreateColumn>} createColumn 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:com.gridly.api/model/ViewColumn>}
     */
    bulkCreate(viewId, createColumn) {
      return this.bulkCreateWithHttpInfo(viewId, createColumn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete
     * delete
     * @param {String} columnId columnId
     * @param {String} viewId viewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    callDeleteWithHttpInfo(columnId, viewId) {
      let postBody = null;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling callDelete");
      }
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling callDelete");
      }

      let pathParams = {
        'columnId': columnId,
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/columns/{columnId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * delete
     * delete
     * @param {String} columnId columnId
     * @param {String} viewId viewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    callDelete(columnId, viewId) {
      return this.callDeleteWithHttpInfo(columnId, viewId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * create
     * Create a Column
     * @param {String} viewId viewId
     * @param {module:com.gridly.api/model/CreateColumn} createColumn 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/ViewColumn} and HTTP response
     */
    createWithHttpInfo(viewId, createColumn) {
      let postBody = createColumn;
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling create");
      }
      // verify the required parameter 'createColumn' is set
      if (createColumn === undefined || createColumn === null) {
        throw new Error("Missing the required parameter 'createColumn' when calling create");
      }

      let pathParams = {
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ViewColumn;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/columns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * create
     * Create a Column
     * @param {String} viewId viewId
     * @param {module:com.gridly.api/model/CreateColumn} createColumn 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/ViewColumn}
     */
    create(viewId, createColumn) {
      return this.createWithHttpInfo(viewId, createColumn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get
     * get
     * @param {String} columnId columnId
     * @param {String} viewId viewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/ViewColumn} and HTTP response
     */
    getWithHttpInfo(columnId, viewId) {
      let postBody = null;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling get");
      }
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling get");
      }

      let pathParams = {
        'columnId': columnId,
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ViewColumn;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/columns/{columnId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * get
     * get
     * @param {String} columnId columnId
     * @param {String} viewId viewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/ViewColumn}
     */
    get(columnId, viewId) {
      return this.getWithHttpInfo(columnId, viewId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * remove
     * remove
     * @param {String} columnId columnId
     * @param {String} viewId viewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeWithHttpInfo(columnId, viewId) {
      let postBody = null;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling remove");
      }
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling remove");
      }

      let pathParams = {
        'columnId': columnId,
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/columns/{columnId}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * remove
     * remove
     * @param {String} columnId columnId
     * @param {String} viewId viewId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    remove(columnId, viewId) {
      return this.removeWithHttpInfo(columnId, viewId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update
     * update
     * @param {String} columnId columnId
     * @param {String} viewId viewId
     * @param {module:com.gridly.api/model/UpdateColumn} updateColumn 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.gridly.api/model/ViewColumn} and HTTP response
     */
    updateWithHttpInfo(columnId, viewId, updateColumn) {
      let postBody = updateColumn;
      // verify the required parameter 'columnId' is set
      if (columnId === undefined || columnId === null) {
        throw new Error("Missing the required parameter 'columnId' when calling update");
      }
      // verify the required parameter 'viewId' is set
      if (viewId === undefined || viewId === null) {
        throw new Error("Missing the required parameter 'viewId' when calling update");
      }
      // verify the required parameter 'updateColumn' is set
      if (updateColumn === undefined || updateColumn === null) {
        throw new Error("Missing the required parameter 'updateColumn' when calling update");
      }

      let pathParams = {
        'columnId': columnId,
        'viewId': viewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ViewColumn;
      return this.apiClient.callApi(
        '/v1/views/{viewId}/columns/{columnId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update
     * update
     * @param {String} columnId columnId
     * @param {String} viewId viewId
     * @param {module:com.gridly.api/model/UpdateColumn} updateColumn 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.gridly.api/model/ViewColumn}
     */
    update(columnId, viewId, updateColumn) {
      return this.updateWithHttpInfo(columnId, viewId, updateColumn)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
